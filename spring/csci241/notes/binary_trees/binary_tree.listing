  void level_order() {
    size_t h; // computed height of the tree (i.e number of levels)
    size_t i; // loop counter

    h = height(root);

    i = 1;
    while (i <= h) {
      print_level(root, i);
      i++;
    }
  }
  void print_level(node<T> *p, size_t level) {
    if (p == nullptr) {
      return;
    }
    if (level == 1) {
      // Visit the node pointed to by p
    }
    else if (level > 1) {
      print_level(p->left, level-1);
      print_level(p->right, level-1);
    }
  }
  size_t height(node<T> *p) {
    size_t l_height; // computed height of node's left subtree
    size_t r_right; // computed height of node's right subtree

    if (p == nullptr) {
      return 0;
    }
    l_height = height(p->left);
    r_height = height(p->right);

    if (l_height > r_height)
      return l_height + 1;
    else
      return r_height + 1;
  }
